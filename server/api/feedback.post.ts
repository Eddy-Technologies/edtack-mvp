// server/api/feedback.post.ts
import type { SupabaseClient } from '@supabase/supabase-js';
import { serverSupabaseClient } from '#supabase/server'; // Path might vary based on project setup

export default defineEventHandler(async (event) => {
  const client: SupabaseClient = await serverSupabaseClient(event);
  const body = await readBody(event);

  const { name, email, message } = body;

  // Basic validation
  if (!message) {
    throw createError({
      statusCode: 400,
      statusMessage: 'Bad Request: Message is required.',
    });
  }

  // Optional: more validation for email format, name length etc.

  try {
    const { data, error } = await client
      .from('feedback') // Table name defined in previous step
      .insert([
        {
          name,
          email,
          message,
          // id and created_at are auto-generated by Supabase
        },
      ])
      .select(); // Optionally select to return the inserted row or just check error

    if (error) {
      console.error('Supabase error inserting feedback:', error);
      throw createError({
        statusCode: 500,
        statusMessage: 'Internal Server Error: Could not submit feedback.',
      });
    }

    return { success: true, data }; // Or a more specific success message
  } catch (err: any) {
    // Handle potential errors from createError or other issues
    console.error('Error in feedback submission endpoint:', err);
    // Ensure a proper error response is sent
    if (!err.statusCode) {
      // If it's not already a Nuxt error
      throw createError({
        statusCode: 500,
        statusMessage: err.message || 'Internal Server Error',
      });
    }
    throw err; // Re-throw if it's already a Nuxt error object
  }
});
